logCPM <- cpm(dge.filt3, log=TRUE, prior.count=3)
d <- as.dist(1-cor(logCPM, method="spearman"))
sampleClustering <- hclust(d)
#windows.options(width=20,height=10)
## Batch: Tissue Source Site (TSS)
batch <- as.integer(factor(tss2))
sampleDendrogram <- as.dendrogram(sampleClustering, hang=0.1)
names(batch) <- colnames(se.filt3)
outcome <- paste(substr(colnames(se.filt3), 9, 12), as.character(se.filt3$type), sep="-")
names(outcome) <- colnames(se.filt3)
#par(mfrow=c(1,1),mar=c(3,2,2,2))
sampleDendrogram <- dendrapply(sampleDendrogram,
function(x, batch, labels) {
if (is.leaf(x)) {
attr(x, "nodePar") <- list(lab.col=as.vector(batch[attr(x, "label")]))
attr(x, "label") <- as.vector(labels[attr(x, "label")])
}
x
}, batch, outcome)
plot(sampleDendrogram, main="Hierarchical clustering of samples")
legend("topright", paste("Batch", sort(unique(batch)), levels(factor(tss2))), fill=sort(unique(batch)))
## Batch: Plate
batch <- as.integer(factor(plate2))
sampleDendrogram <- as.dendrogram(sampleClustering, hang=0.1)
names(batch) <- colnames(se.filt3)
outcome <- paste(substr(colnames(se.filt3), 9, 12), as.character(se.filt3$type), sep="-")
names(outcome) <- colnames(se.filt3)
sampleDendrogram <- dendrapply(sampleDendrogram,
function(x, batch, labels) {
if (is.leaf(x)) {
attr(x, "nodePar") <- list(lab.col=as.vector(batch[attr(x, "label")]))
attr(x, "label") <- as.vector(labels[attr(x, "label")])
}
x
}, batch, outcome)
plot(sampleDendrogram, main="Hierarchical clustering of samples")
legend("topright", paste("Batch", sort(unique(batch)), levels(factor(plate2))), fill=sort(unique(batch)))
## Batch: Sample Vial
batch <- as.integer(factor(samplevial2))
sampleDendrogram <- as.dendrogram(sampleClustering, hang=0.1)
names(batch) <- colnames(se.filt3)
outcome <- paste(substr(colnames(se.filt3), 9, 12), as.character(se.filt3$type), sep="-")
names(outcome) <- colnames(se.filt3)
sampleDendrogram <- dendrapply(sampleDendrogram,
function(x, batch, labels) {
if (is.leaf(x)) {
attr(x, "nodePar") <- list(lab.col=as.vector(batch[attr(x, "label")]))
attr(x, "label") <- as.vector(labels[attr(x, "label")])
}
x
}, batch, outcome)
plot(sampleDendrogram, main="Hierarchical clustering of samples")
legend("topright", paste("Batch", sort(unique(batch)), levels(factor(samplevial2))), fill=sort(unique(batch)))
library(knitr)
opts_chunk$set(cache=TRUE,
cache.path="cache/file2",
cache.extra=R.version.string,
autodep=TRUE,
fig.align="center",
comment="")
require(BiocStyle)
install.packages("BiocStyle")
logCPM <- cpm(dge.filt3, log=TRUE, prior.count=3)
d <- as.dist(1-cor(logCPM, method="spearman"))
sampleClustering <- hclust(d)
#windows.options(width=20,height=10)
## Batch: Tissue Source Site (TSS)
batch <- as.integer(factor(tss2))
sampleDendrogram <- as.dendrogram(sampleClustering, hang=0.1)
names(batch) <- colnames(se.filt3)
outcome <- paste(substr(colnames(se.filt3), 9, 12), as.character(se.filt3$type), sep="-")
names(outcome) <- colnames(se.filt3)
#par(mfrow=c(1,1),mar=c(3,2,2,2))
sampleDendrogram <- dendrapply(sampleDendrogram,
function(x, batch, labels) {
if (is.leaf(x)) {
attr(x, "nodePar") <- list(lab.col=as.vector(batch[attr(x, "label")]))
attr(x, "label") <- as.vector(labels[attr(x, "label")])
}
x
}, batch, outcome)
plot(sampleDendrogram, main="Hierarchical clustering of samples")
legend("topright", paste("Batch", sort(unique(batch)), levels(factor(tss2))), fill=sort(unique(batch)))
## Batch: Plate
batch <- as.integer(factor(plate2))
sampleDendrogram <- as.dendrogram(sampleClustering, hang=0.1)
names(batch) <- colnames(se.filt3)
outcome <- paste(substr(colnames(se.filt3), 9, 12), as.character(se.filt3$type), sep="-")
names(outcome) <- colnames(se.filt3)
sampleDendrogram <- dendrapply(sampleDendrogram,
function(x, batch, labels) {
if (is.leaf(x)) {
attr(x, "nodePar") <- list(lab.col=as.vector(batch[attr(x, "label")]))
attr(x, "label") <- as.vector(labels[attr(x, "label")])
}
x
}, batch, outcome)
plot(sampleDendrogram, main="Hierarchical clustering of samples")
legend("topright", paste("Batch", sort(unique(batch)), levels(factor(plate2))), fill=sort(unique(batch)))
## Batch: Sample Vial
batch <- as.integer(factor(samplevial2))
sampleDendrogram <- as.dendrogram(sampleClustering, hang=0.1)
names(batch) <- colnames(se.filt3)
outcome <- paste(substr(colnames(se.filt3), 9, 12), as.character(se.filt3$type), sep="-")
names(outcome) <- colnames(se.filt3)
sampleDendrogram <- dendrapply(sampleDendrogram,
function(x, batch, labels) {
if (is.leaf(x)) {
attr(x, "nodePar") <- list(lab.col=as.vector(batch[attr(x, "label")]))
attr(x, "label") <- as.vector(labels[attr(x, "label")])
}
x
}, batch, outcome)
plot(sampleDendrogram, main="Hierarchical clustering of samples")
legend("topright", paste("Batch", sort(unique(batch)), levels(factor(samplevial2))), fill=sort(unique(batch)))
knitr::opts_chunk$set(echo = TRUE)
se <- readRDS(file.path("seKIRC.rds"))
knitr::opts_chunk$set(echo = TRUE)
logCPM <- cpm(dge.filt4, log=TRUE, prior.count=3)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(SummarizedExperiment)
library(edgeR)
library(geneplotter)
se <- readRDS(file.path("seKIRC.rds"))
se
dim(colData(se))
colData(se)[1:5, 1:5]
mcols(colData(se), use.names=TRUE)
dge <- DGEList(counts=assays(se)$counts, genes=mcols(se))
assays(se)$logCPM <- cpm(dge, log=TRUE, prior.count=0.5)
ord <- order(dge$sample$lib.size)
cpm_cutoff <- 21
mask <- colSums(assays(se)$counts)/1e6 > cpm_cutoff
se.filt <- se[, mask]
dge.filt <- dge[, mask]
assays(se.filt)$logCPM <- cpm(dge.filt, log=TRUE, prior.count=0.5)
avgexp <- rowMeans(assays(se.filt)$logCPM)
cpm_cutoff <- round(15/min(dge.filt$samples$lib.size/1e+06), digits = 1)
nsamplescutoff <- min(table(se.filt$type))
mask <- rowSums(cpm(dge.filt) > cpm_cutoff) >= nsamplescutoff
se.filt2 <- se.filt[mask, ]
dge.filt$samples$group <- se.filt$type
dge.filt2 <- calcNormFactors(dge.filt2)
dge.filt2 <- dge.filt[mask, ]
se.filt2 <- se.filt[mask, ]
dge.filt$samples$group <- se.filt$type
dge.filt2 <- calcNormFactors(dge.filt2)
dge.filt2 <- calcNormFactors(dge.filt2)
dge.filt2$samples$group <- se.filt2$type
tss <- substr(colnames(se.filt2), 6, 7)
center <- substr(colnames(se.filt2), 27, 28)
plate <- substr(colnames(se.filt2), 22, 25)
portionanalyte <- substr(colnames(se.filt2), 18, 20)
table(data.frame(TYPE=se.filt2$type, TSS=tss))
samplevial <- substr(colnames(se.filt2), 14, 16)
tss_list <- c("A3","B0","B2","B8","CW","CZ")
plate_list <- c(1503,1541,1672)
samplevial_list <- c("01A","11A")
portion <- "01R"
the_mask <- (substr(colnames(dge.filt),6,7) %in% tss_list & substr(colnames(dge.filt),22,25) %in% plate_list & substr(colnames(dge.filt),18,20) == portion & substr(colnames(dge.filt),14,16) %in% samplevial_list)
se.filt3 <- se.filt2[,the_mask]
dge.filt3 <- dge.filt2[,the_mask]
tss2 <- substr(colnames(se.filt3), 6, 7)
plate2 <- substr(colnames(se.filt3), 22, 25)
portionanalyte2 <- substr(colnames(se.filt3), 18, 20)
samplevial2 <- substr(colnames(se.filt3), 14, 16)
logCPM <- cpm(dge.filt3, log=TRUE, prior.count=3)
se.filt4 <- se.filt3[,grep("5546|5591|4698", colnames(se.filt3), invert=TRUE)]
dge.filt4 <- dge.filt3[,grep("5546|5591|4698", colnames(dge.filt3), invert=TRUE)]
se.dis <- se.filt3[,grep("5546|5591|4698", colnames(se.filt3))]
tss3 <- substr(colnames(se.filt4), 6, 7)
plate3 <- substr(colnames(se.filt4), 22, 25)
portionanalyte3 <- substr(colnames(se.filt4), 18, 20)
samplevial3 <- substr(colnames(se.filt4), 14, 16)
library(sva)
mod <- model.matrix(~ se.filt4$type, colData(se.filt4))
mod0 <- model.matrix(~ 1, colData(se.filt4))
pv <- f.pvalue(assays(se.filt4)$logCPM, mod, mod0)
sum(p.adjust(pv, method="fdr")< 0.01)
hist(pv, main="",las=1)
sv <- sva(assays(se.filt4)$logCPM, mod, mod0)
sv$n
modsv <- cbind(mod, sv$sv)
mod0sv <- cbind(mod0, sv$sv)
pvsv <- f.pvalue(assays(se.filt4)$logCPM, modsv, mod0sv)
sum(p.adjust(pvsv,method="fdr")<0.01)
hist(pvsv, main="",las=1)
logCPM <- cpm(dge.filt4, log=TRUE, prior.count=3)
tumorExp <- rowMeans(logCPM[, se.filt4$type == "tumor"])
row.names(tumorExp) <- rowData(se.filt4)$symbol
knitr::opts_chunk$set(echo = TRUE, fig.align="center")
library(knitr)
library(SummarizedExperiment)
library(edgeR)
library(geneplotter)
library(sva)
library(ggplot2)
se <- readRDS(file.path("input","seKIRC.rds"))
dge <- DGEList(counts=assays(se)$counts, genes=mcols(se))
assays(se)$logCPM <- cpm(dge, log=TRUE, prior.count=0.5)
ord <- order(dge$sample$lib.size)
cpm_cutoff <- 21
mask <- colSums(assays(se)$counts)/1e6 > cpm_cutoff
se.filt <- se[, mask]
dge.filt <- dge[, mask]
avgexp <- rowMeans(assays(se.filt)$logCPM)
cpm_cutoff <- round(15/min(dge.filt$samples$lib.size/1e+06), digits = 1)
nsamplescutoff <- min(table(se.filt$type))
mask <- rowSums(cpm(dge.filt) > cpm_cutoff) >= nsamplescutoff
se.filt2 <- se.filt[mask, ]
dge.filt2 <- dge.filt[mask, ]
dge.filt$samples$group <- se.filt$type
dge.filt2 <- calcNormFactors(dge.filt2)
dge.filt2 <- calcNormFactors(dge.filt2)
dge.filt2$samples$group <- se.filt2$type
tss <- substr(colnames(se.filt2), 6, 7)
center <- substr(colnames(se.filt2), 27, 28)
plate <- substr(colnames(se.filt2), 22, 25)
portionanalyte <- substr(colnames(se.filt2), 18, 20)
samplevial <- substr(colnames(se.filt2), 14, 16)
tss_list <- c("A3","B0","B2","B8","CW","CZ")
plate_list <- c(1503,1541,1672)
samplevial_list <- c("01A","11A")
portion <- "01R"
the_mask <- (substr(colnames(dge.filt),6,7) %in% tss_list & substr(colnames(dge.filt),22,25) %in% plate_list & substr(colnames(dge.filt),18,20) == portion & substr(colnames(dge.filt),14,16) %in% samplevial_list)
se.filt3 <- se.filt2[,the_mask]
dge.filt3 <- dge.filt2[,the_mask]
dim(se.filt3)
tss2 <- substr(colnames(se.filt3), 6, 7)
plate2 <- substr(colnames(se.filt3), 22, 25)
portionanalyte2 <- substr(colnames(se.filt3), 18, 20)
samplevial2 <- substr(colnames(se.filt3), 14, 16)
logCPM <- cpm(dge.filt3, log=TRUE, prior.count=3)
d <- as.dist(1-cor(logCPM, method="spearman"))
se.filt4 <- se.filt3[,grep("5546|5591|4698", colnames(se.filt3), invert=TRUE)]
dge.filt4 <- dge.filt3[,grep("5546|5591|4698", colnames(dge.filt3), invert=TRUE)]
se.dis <- se.filt3[,grep("5546|5591|4698", colnames(se.filt3))]
tss3 <- substr(colnames(se.filt4), 6, 7)
plate3 <- substr(colnames(se.filt4), 22, 25)
portionanalyte3 <- substr(colnames(se.filt4), 18, 20)
samplevial3 <- substr(colnames(se.filt4), 14, 16)
dim(dge.filt4)
mod <- model.matrix(~ se.filt4$type, colData(se.filt4))
mod0 <- model.matrix(~ 1, colData(se.filt4))
pv <- f.pvalue(assays(se.filt4)$logCPM, mod, mod0)
sum(p.adjust(pv, method="fdr")< 0.01)
sv <- sva(assays(se.filt4)$logCPM, mod, mod0)
modsv <- cbind(mod, sv$sv)
mod0sv <- cbind(mod0, sv$sv)
pvsv <- f.pvalue(assays(se.filt4)$logCPM, modsv, mod0sv)
sum(p.adjust(pvsv,method="fdr")<0.01)
logCPM <- cpm(dge.filt4, log=TRUE, prior.count=3)
tumorExp <- rowMeans(logCPM[, se.filt4$type == "tumor"])
normalExp <- rowMeans(logCPM[, se.filt4$type == "normal"])
par(mfrow = c(1, 2))
plot(normalExp, tumorExp, xlab = "Tumor", ylab = "Normal", pch = ".", cex = 4, las = 1)
plot((tumorExp + normalExp)/2, tumorExp - normalExp, pch = ".", cex = 4, las = 1)
logCPM
log2fc <- tumorExp - normalExp
ranking <- order(abs(log2fc), decreasing = TRUE)
DEG <- data.frame(
Log2FC = round(log2fc[ranking], digits = 3),
FC = round(2^log2fc[ranking], digits = 3),
`1/FC` = round(2^(-log2fc[ranking]), digits = 3),
logCPM = as.numeric(rowMeans(assays(se.filt4)$logCPM)),
`p-value` = as.numeric(pvsv), row.names = rowData(se.filt4)$symbol[ranking],
check.names = FALSE)
head(DEG)
DEG$BonfCutoff <- rep(0.05/nrow(DEG), nrow(DEG))
DEG$BonfPvalue <- p.adjust(DEG$Pvalue, method = "bonferroni")
head(DEG)
DEG$BonfPvalue <- p.adjust(DEG$`p-value`, method = "bonferroni")
head(DEG)
DEG$FDRpvalue <- p.adjust(DEG$`p-value, method = "fdr")
DEG
vgew
eWGW
Gw
g
we
G
DEG$FDRpvalue <- p.adjust(DEG$`p-value`, method = "fdr")
DEG$FDRpvalue <- p.adjust(DEG$`p-value`, method = "fdr")
DEG
head(DEG)
plot(DEG$logFC, -log10(DEG$`p-value`), pch=".", cex=3, xlab="Log fold-change", ylab="Raw p-value", las=1)
abline(h=-log10(max(DEG$`p-value`[tab$FDRpvalue <= 0.05])), lty=2)
plot(DEG$logFC, -log10(DEG$`p-value`), pch=".", cex=3, xlab="Log fold-change", ylab="Raw p-value", las=1)
abline(h=-log10(max(DEG$`p-value`[DEG$FDRpvalue <= 0.05])), lty=2)
plot(DEG$logFC, -log10(DEG$`p-value`), pch=".", cex=3, xlab="Log fold-change", ylab="Raw p-value", las=1)
abline(h=-log10(max(DEG$`p-value`[DEG$FDRpvalue <= 0.05])), lty=2)
plot(DEG$logFC, -log10(DEG$`p-value`), pch=".", cex=3, xlab="Log fold-change", ylab="Raw p-value", las=1)
abline(h=-log10(max(DEG$`p-value`[DEG$FDRpvalue <= 0.05])), lty=2)
plot(DEG$logFC, -log10(DEG$`p-value`), pch=".", cex=3, xlab="Log fold-change", ylab="Raw p-value", las=1)
length(DEG$logFC)
plot(DEG$log2fc, -log10(DEG$`p-value`), pch=".", cex=3, xlab="Log fold-change", ylab="Raw p-value", las=1)
abline(h=-log10(max(DEG$`p-value`[DEG$FDRpvalue <= 0.05])), lty=2)
length(DEG$log2fc)
length(DEG$Log2FC)
plot(DEG$Log2FC, -log10(DEG$`p-value`), pch=".", cex=3, xlab="Log fold-change", ylab="Raw p-value", las=1)
abline(h=-log10(max(DEG$`p-value`[DEG$FDRpvalue <= 0.05])), lty=2)
plot(DEG$Log2FC, -log10(DEG$FDRpvalue), pch=".", cex=3, xlab="Log fold-change", ylab="Raw p-value", las=1)
abline(h=-log10(max(DEG$`p-value`[DEG$FDRpvalue <= 0.05])), lty=2)
SDEG <- DEG[DEG$FDRpvalue < 1e-6]
SDEG <- DEG[DEG$FDRpvalue < 1e-6,]
plot(SDEG$Log2FC, -log10(SDEG$FDRpvalue), pch=".", cex=3, xlab="Log fold-change", ylab="Raw p-value", las=1)
plot(DEG$Log2FC, -log10(DEG$FDRpvalue), pch=".", cex=3, xlab="Log fold-change", ylab="Raw p-value", las=1)
SDEG <- DEG[DEG$FDRpvalue < 1e-5,]
plot(SDEG$Log2FC, -log10(SDEG$FDRpvalue), pch=".", cex=3, xlab="Log fold-change", ylab="Raw p-value", las=1)
SDEG2 <- SDEG[abs(SDEG$Log2FC) > 4 ,]
plot(SDEG2$Log2FC, -log10(SDEG2$FDRpvalue), pch=".", cex=3, xlab="Log fold-change", ylab="Raw p-value", las=1)
plot(DEG$Log2FC, -log10(DEG$FDRpvalue), pch=".", cex=3, xlab="Log fold-change", ylab="Raw p-value", las=1)
SDEG2 <- SDEG[abs(SDEG$Log2FC) > 2 ,]
plot(SDEG2$Log2FC, -log10(SDEG2$FDRpvalue), pch=".", cex=3, xlab="Log fold-change", ylab="Raw p-value", las=1)
SDEG2 <- SDEG[abs(SDEG$Log2FC) > 1 ,]
SDEG <- DEG[DEG$FDRpvalue < 1e-3,]
SDEG2 <- SDEG[abs(SDEG$Log2FC) > 1 ,]
plot(SDEG2$Log2FC, -log10(SDEG2$FDRpvalue), pch=".", cex=3, xlab="Log fold-change", ylab="Raw p-value", las=1)
SDEG <- DEG[DEG$FDRpvalue < 1e-4,]
SDEG2 <- SDEG[abs(SDEG$Log2FC) > 3 ,]
plot(SDEG2$Log2FC, -log10(SDEG2$FDRpvalue), pch=".", cex=3, xlab="Log fold-change", ylab="Raw p-value", las=1)
dim(SDEG2)
SDEG2 <- SDEG[abs(SDEG$Log2FC) > 4 ,]
plot(SDEG2$Log2FC, -log10(SDEG2$FDRpvalue), pch=".", cex=3, xlab="Log fold-change", ylab="Raw p-value", las=1)
plot(SDEG2$Log2FC, -log10(SDEG2$FDRpvalue), pch=".", cex=3, xlab="Log fold-change", ylab="Raw p-value", las=1)
dim(SDEG2)
head(SDGE2)
head(SDEG2)
OEG <- SDEG2[SDEG2$Log2FC > 4,]
UEG <- SDEG2[SDEG2$Log2FC < -4,]
length(SDEG2$Log2FC)
length(OEG$Log2FC)
length(UEG$Log2FC)
head(OEG)
OEG
plot(DEG$Log2FC, -log10(DEG$FDRpvalue), pch=".", cex=3, xlab="Log fold-change", ylab="Raw p-value", las=1)
DEG
plot(DEG$Log2FC, -log10(DEG$`p-value`), pch=".", cex=3, xlab="Log fold-change", ylab="Raw p-value", las=1)
pvsv
require(AnnotationDbi)
require(org.Hs.eg.db)
require(TxDb.Hsapiens.UCSC.hg19.knownGene)
require(biocLite)
biocLite()
require(biocLite)
require(BiocInstaller
)
biocLite(TxDb.Hsapiens.UCSC.hg19.knownGene)
biocLite("TxDb.Hsapiens.UCSC.hg19.knownGene")
biocLite("rtracklayer")
biocLite("AnnotationHub")
biocLite("GenomicFeatures")
biocLite(BSgenome.Hsapiens.UCSC.hg19)
biocLite(BSgenome.Hsapiens.UCSC.hg19"")
biocLite("BSgenome.Hsapiens.UCSC.hg19")
require("org.Hs.eg.db")
require("TxDv.Hsapiens.UCSC.hg19.knownGene")
require("TxDb.Hsapiens.UCSC.hg19.knownGene")
require("BSgenome.Hsapiens.UCSC.hg19")
library(SummarizedExperiment)
lclse <- readRDS("pickrell2010.rds")
setwd("D:/Documents/BIM/3Q/IEO/PROJECT/IEO/HANDS_ON")
lclse <- readRDS("pickrell2010.rds")
setwd("D:/Documents/BIM/3Q/IEO/HANDS_ON")
lclse <- readRDS("pickrell2010.rds")
genesmd <- data.frame(
chr = as.character(seqnames(rowRanges(lclse))),
symbol = rowData(lclse)[,1],
stringsAsFactors = FALSE)
library(edgeR)
dge <- DGEList(counts = assays(lclse)$counts, group = lclse$sex, genes = genesmd)
dge <- calcNormFactors(dge)
assays(lclse)$logCPM <- cpm(dge, log = TRUE)
mask <- rowMeans(assays(lclse)$logCPM) > 1
geneUniverse <- rownames(lclse)
lclse <- lclse[mask, ]
dge <- dge[mask, ]
library(limma)
library(sva)
lclse$sex <- relevel(lclse$sex, ref = "male")
mod <- model.matrix(~sex + concentration, data = colData(lclse))
mod0 <- model.matrix(~concentration, colData(lclse))
sv <- sva(assays(lclse)$logCPM, mod = mod, mod0 = mod0)
mod <- cbind(mod, sv$sv)
colnames(mod) <- c(colnames(mod)[1:4], paste0("SV", 1:sv$n))
corfit <- duplicateCorrelation(assays(lclse)$logCPM, mod, block = lclse$cellline)
fit <- lmFit(assays(lclse)$logCPM, mod, block = lclse$cellline, correlation = corfit$consensus)
fit <- eBayes(fit, trend = TRUE)
tt <- topTable(fit, coef = 2, n = Inf)
DEgenes <- rownames(tt)[tt$adj.P.Val < 0.1]
mod
head(mod)
library(GOstats)
params <- new("GOHyperGParams", geneIds=DEgenes, universeGeneIds=geneUniverse,
annotation="org.Hs.eg.db", ontology="BP",
pvalueCutoff=0.05, testDirection="over")
#REQUIREMENTS
library(knitr)
library(SummarizedExperiment)
library(edgeR)
library(geneplotter)
library(sva)
library(ggplot2)
#DATA IMPORT
setwd("D:/Documents/BIM/3Q/IEO/PROJECT/IEO/OLD")
se <- readRDS(file.path("seKIRC.rds"))
#DGE OBJECT CREATION
dge <- DGEList(counts=assays(se)$counts, genes=mcols(se))
#WITHIN-SAMPLE NORMALIZATION
assays(se)$logCPM <- cpm(dge, log=TRUE, prior.count=0.5)
#LOW SEQUENCING DEPTH SAMPLES FILTERING
cpm_cutoff <- 21
mask <- colSums(assays(se)$counts)/1e6 > cpm_cutoff
se.filt <- se[, mask]
dge.filt <- dge[, mask]
#LOWLY EXPRESSED GENES FILTERING
assays(se.filt)$logCPM <- cpm(dge.filt, log=TRUE, prior.count=0.5)
avgexp <- rowMeans(assays(se.filt)$logCPM)
cpm_cutoff <- round(15/min(dge.filt$samples$lib.size/1e+06), digits = 1)
nsamplescutoff <- min(table(se.filt$type))
mask <- rowSums(cpm(dge.filt) > cpm_cutoff) >= nsamplescutoff
se.filt2 <- se.filt[mask, ]
dge.filt2 <- dge.filt[mask, ]
#BETWEEN-SAMPLE NORMALIZATION
dge.filt2 <- calcNormFactors(dge.filt2)
dge.filt2$samples$group <- se.filt2$type
#BATCH EFFECT IDENTIFICATION
tss <- substr(colnames(se.filt2), 6, 7)
center <- substr(colnames(se.filt2), 27, 28)
plate <- substr(colnames(se.filt2), 22, 25)
portionanalyte <- substr(colnames(se.filt2), 18, 20)
samplevial <- substr(colnames(se.filt2), 14, 16)
table(data.frame(TYPE=se.filt2$type, TSS=tss))
table(data.frame(TYPE=se.filt2$type, CENTER=center))
table(data.frame(TYPE=se.filt2$type, PLATE=plate))
table(data.frame(TYPE=se.filt2$type, SAMPLEVIAL=samplevial))
table(data.frame(TYPE=se.filt2$type, PORTIONANALYTE=portionanalyte))
tss_list <- c("A3","B0","B2","B8","CW","CZ")
plate_list <- c(1503,1541,1672)
samplevial_list <- c("01A","11A")
portion <- "01R"
the_mask <- (substr(colnames(dge.filt),6,7) %in% tss_list & substr(colnames(dge.filt),22,25) %in% plate_list & substr(colnames(dge.filt),18,20) == portion & substr(colnames(dge.filt),14,16) %in% samplevial_list)
se.filt3 <- se.filt2[,the_mask]
dge.filt3 <- dge.filt2[,the_mask]
#REMOVAL OF OUTLIERS
se.filt4 <- se.filt3[,grep("5546|5591|4698", colnames(se.filt3), invert=TRUE)]
dge.filt4 <- dge.filt3[,grep("5546|5591|4698", colnames(dge.filt3), invert=TRUE)]
se.dis <- se.filt3[,grep("5546|5591|4698", colnames(se.filt3))]
tss3 <- substr(colnames(se.filt4), 6, 7)
plate3 <- substr(colnames(se.filt4), 22, 25)
portionanalyte3 <- substr(colnames(se.filt4), 18, 20)
samplevial3 <- substr(colnames(se.filt4), 14, 16)
##################DO NOT KNOW WHAT IS THIS USEFUL FOR##########################
#SVA
mod <- model.matrix(~factor(se.filt4$type) + factor(tss3) + factor(plate3), colData(se.filt4))
mod0 <- model.matrix(~ 1, colData(se.filt4))
pv <- f.pvalue(assays(se.filt4)$logCPM, mod, mod0)
sv <- sva(assays(se.filt4)$logCPM, mod, mod0)
modsv <- cbind(mod, sv$sv)
mod0sv <- cbind(mod0, sv$sv)
pvsv <- f.pvalue(assays(se.filt4)$logCPM, modsv, mod0sv)
mod
modsb
modsv
head(modsv)
head(sv$sv)
colnames(modsv) <- c(colnames(modsv)[1:4], paste0("SV", 1:sv$n))
sv$n.sv
colnames(modsv) <- c(colnames(modsv)[1:4], paste0("SV", 1:sv$n.sv))
colnames(modsv) <- c(colnames(modsv)[1:49], paste0("SV", 1:sv$n.sv))
colnames(modsv) <- c(colnames(modsv)[1:9], paste0("SV", 1:sv$n.sv))
head(modsv)
fit <- lmFit(assays(se.filt4)$logCPM,modsv)
fit <- eBayes(fit)
res <- decideTests(fit)
summary(res)
FDRcutoff <- 0.05
res <- decideTests(fit, p.value = FDRcutoff)
summary(res)
tt <- topTable(fit, coef = 2, n = Inf)
head(tt)
genesmd <- data.frame(chr = as.character(seqnames(rowRanges(se.filt4))), symbol = rowData(se.filt4)[,
1], stringsAsFactors = FALSE, logCPM = as.numeric(rowMeans(assays(se.filt4)$logCPM)))
fit$genes <- genesmd
fit$logCPM <- data.frame(logCPM = as.numeric(rowMeans(assays(se.filt4)$logCPM)), stringsAsFactors = FALSE)
tt <- topTable(fit, coef = 2, n = Inf)
tt.filt <- tt[abs(tt$logFC)>3,]
tt.filt <- tt.filt[tt.filt$P.Value < 1e-5,]
head(tt)
ggplot(data=tt) +
geom_point(aes(x=logFC,y=-log(P.Value),color=logCPM)) +
scale_colour_gradientn(colours=c("#000000" ,"#FF0000" )) +
geom_hline(yintercept=10, linetype="dashed", color = "black",size=1)+
geom_vline(xintercept = 3, linetype="dashed",
color = "black", size=1)+
geom_vline(xintercept = -3, linetype="dashed",
color = "black", size=1)
head(tt)
ggplot(data=tt.filt) +
geom_point(aes(x=logFC,y=-log(P.Value),color=logCPM)) +
scale_colour_gradientn(colours=c("#000000" ,"#FF0000" )) +
geom_hline(yintercept=10, linetype="dashed", color = "black",size=1)+
geom_vline(xintercept = 3, linetype="dashed",
color = "black", size=1)+
geom_vline(xintercept = -3, linetype="dashed",
color = "black", size=1)
dim(tt.filt)
over <- tt.filt[tt.filt$logFC > 3,]
under <- tt.filt[tt.filt$logFC < -3,]
dim(under)
dim(over)
